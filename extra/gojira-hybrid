#!/usr/bin/env bash

HYBRID_PATH=$GOJIRA_PATH/extra/hybrid
GOJIRA_TARGET=kong-cp

kong_cp() {
  # Ensure there is no database requested
  if [[ -z $GOJIRA_DATABASE ]]; then
    CP_DATABASE_ARGS=--alone
  fi

  GOJIRA_TARGET=kong-cp $0 lay --host kong-cp $CP_DATABASE_ARGS
}

kong_dp() {
  GOJIRA_TARGET=kong-dp $0 lay --host kong-dp --alone
}

hybrid-usage () {
cat << EOF
hybrid mode / plugin
====================

run kong in hybrid mode without the hassle

 - generate cluster keys
 - creates a kong-dp and a kong-cp service, based on gojira flags
 - seamlessly integrates and composes with other gojira modes

Examples:

$ gojira hybrid up

$ gojira hybrid up -t some-branch

$ gojira hybrid up -k path/to/some/kong

$ gojira hybrid shell@kong-cp

$ gojira hybrid shell@kong-dp

$ gojira hybrid logs kong-cp kong-dp

EOF
}


hybrid_setup() {
  COMPOSE_FILE=$HYBRID_PATH/docker-compose.yml.sh

  export GOJIRA_DATABASE
  export GOJIRA_KONG_PATH

  if [[ ! -d "$GOJIRA_KONG_PATH" ]]; then create_kong; fi

  add_egg kong_cp
  add_egg kong_dp
  add_egg "$COMPOSE_FILE"

  if [[ ! -d $HYBRID_PATH/cluster_keys ]]; then
    # Generate certs
    mkdir -p $HYBRID_PATH/cluster_keys
    pushd $HYBRID_PATH/cluster_keys
      openssl req -x509 -newkey rsa:4096 -keyout cluster.key -out cluster.crt -days 365 -nodes -subj '/CN=kong_clustering/'
      chmod 644 cluster.key
    popd
  fi

  export CLUSTER_KEY_PATH=$HYBRID_PATH/cluster_keys
  export GOJIRA_TARGET

  # This only runs on "mode", not in plugin mode. Thus, makes it the plugin
  # action call
  case $1 in
    help)
      hybrid-usage
      exit 0
      ;;
  esac

  [[ $1 != "plugin" ]] && main "$@"
}

hybrid_setup "$@"
