#!/bin/bash


KAFKA_PATH=$(dirname ${BASH_SOURCE[0]})/kafka

#  Add commands to usage
function gojira-kafka-commands {
  cat << EOF
[kafka] Commands:
  up                       gojira's up command is annotated

EOF
}

function gojira-postgresro-usage {
  cat << EOF

This plugin adds a kafka instance (plus zookeeper and a rest-proxy) to the kong cluster

EOF
}

kafka_egg() {
  cat << EOF
version: '3.5'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${GOJIRA_KAFKA_VERSION:-6.2.0}
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/zookeper_jaas.conf"

    volumes:
      - ${KAFKA_PATH}/zookeper_jaas.conf:/etc/kafka/zookeper_jaas.conf
    networks:
      gojira: {}

  add-kafka-users:
    image: confluentinc/cp-kafka:${GOJIRA_KAFKA_VERSION:-6.2.0}
    depends_on:
      - rest-proxy
    networks:
      gojira: {}
    command: kafka-configs --bootstrap-server broker:9092 --alter --add-config 'SCRAM-SHA-256 =[iterations=4096,password=client-password]' --entity-type users --entity-name client

  broker:
    image: confluentinc/cp-kafka:${GOJIRA_KAFKA_VERSION:-6.2.0}
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "19093:19093"
      - "9092:9092"
      - "9093:9093"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,SSL:SSL,SASL_SSL:SASL_SSL,SASL_PLAINTEXT:SASL_PLAINTEXT
      KAFKA_ADVERTISED_HOST_NAME: broker
      KAFKA_LISTENERS:  SASL_SSL://broker:9093,PLAINTEXT_HOST://broker:9092,PLAINTEXT://broker:29092,SSL://broker:29093,SASL_PLAINTEXT://broker:19093
      KAFKA_ADVERTISED_LISTENERS: SASL_SSL://broker:9093,PLAINTEXT_HOST://broker:9092,PLAINTEXT://broker:29092,SSL://broker:29093,SASL_PLAINTEXT://broker:19093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # ssl
      KAFKA_SSL_KEYSTORE_FILENAME: keystore/kafka.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: ssl_key_credentials
      KAFKA_SSL_KEYSTORE_PASSWORD: confluent
      KAFKA_SSL_KEYSTORE_TYPE: PKCS12
      KAFKA_SSL_TRUSTSTORE_FILENAME: truststore/kafka.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: ssl_key_credentials
      KAFKA_SSL_TRUSTSTORE_TYPE: PKCS12
      KAFKA_SSL_KEY_PASSWORD: confluent
      KAFKA_SSL_KEY_CREDENTIALS: ssl_key_credentials

      # Enable SASL SSL configuration
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: SASL_PLAIN,PLAIN,SCRAM-SHA-256
      KAFKA_SASL_MECHANISMS: PLAIN,SCRAM-SHA-256

      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: PLAINTEXT

      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      # Ignores name resolution
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ''

      # 'required' for mTLS
      KAFKA_SSL_CLIENT_AUTH: 'requested'

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

      KAFKA_DELEGATION_TOKEN_MASTER_KEY: 'foo'

      # 'requested' for TLS
      # KAFKA_SSL_CLIENT_AUTH: requested

      # Enables tcp lib level debugging
      KAFKA_OPTS: "-Djavax.net.debug=all -Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"


    volumes:
      - ${KAFKA_PATH}/truststore:/etc/kafka/secrets/truststore
      - ${KAFKA_PATH}/keystore:/etc/kafka/secrets/keystore
      - ${KAFKA_PATH}/credentials:/etc/kafka/secrets/
      - ${KAFKA_PATH}/client.config:/etc/kafka/client.config
      - ${KAFKA_PATH}/broker-config/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
    networks:
      gojira: {}

  rest-proxy:
    networks:
      gojira: {}
    image: confluentinc/cp-kafka-rest:${GOJIRA_KAFKA_VERSION:-6.2.0}
    depends_on:
      - broker
    ports:
      - 8082:8082
    hostname: rest-proxy
    healthcheck:
      test: ["CMD", "curl" ,"http://0.0.0.0:8082/topics"]
      interval: 10s
      timeout: 10s
      retries: 50
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:9092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
EOF
}

kafka-init() {
  # include compose file modifications
  # by using a function
  GOJIRA_EGGS+=("kafka_egg")

  # transform an existing gojira action
  case $ACTION in
    up)
      inf "[kafka] Initializing kafka"
      ;;
  esac

  # This only runs on "mode", not in plugin mode. Thus, makes it the plugin
  # action call
  case $1 in
    help)
      gojira-kafka-usage
      ;;
  esac
}

kafka-init "$@"
